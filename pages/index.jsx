import Head from 'next/head'
import { useEffect, useState } from "react";

import firebase from 'firebase/app';
import 'firebase/auth';
import 'firebase/firestore';

import Button from '../components/Button'
import Channel from '../components/Channel'

if (!firebase.apps.length) {
  firebase.initializeApp({
    apiKey: "AIzaSyB1huIOk0WpvYCbSb1xqd4RBD3Dt8PYe-s",
    authDomain: "random-people-a5f14.firebaseapp.com",
    projectId: "random-people-a5f14",
    storageBucket: "random-people-a5f14.appspot.com",
    messagingSenderId: "425238964552",
    appId: "1:425238964552:web:1e1a0b21a05a6fced02b7d"
  });
} else {
  firebase.app(); // if already initialized, use that one
}

const auth = firebase.auth();
const db = firebase.firestore();


export default function Home() {

  const [initializing, setInitializing] = useState(true);
  const [user, setUser] = useState(() => auth.currentUser);
  const [docs, setDocs] = useState();

  const db = firebase.firestore();
  const query = db.collection('Messages').orderBy('createdAt').limit(100);

  useEffect(() => {
    const unsubscribe = firebase.auth().onAuthStateChanged(user => {
      if (user) {
        setUser(user);
      } else {
        setUser(false);
      }
      if (initializing) {
        setInitializing(false);
      }
    });

    // Cleanup subscription
    return unsubscribe;
  }, [initializing]);

  useEffect(() => {
    // Subscribe to query with onSnapshot
    const unsubscribe = query.onSnapshot(querySnapshot => {
      // Get all documents from collection - with IDs
      const data = querySnapshot.docs.map(doc => ({
        ...doc.data(),
        id: doc.id,
      }));
      // Update state
      setDocs(data);
    });

    // Detach listener
    return unsubscribe;
  }, []);

  const signInWithGoogle = async () => {
    // Retrieve Google provider object
    const provider = new firebase.auth.GoogleAuthProvider();
    // Set language to the default browser preference
    firebase.auth().useDeviceLanguage();
    // Start sign in process
    try {
      await firebase.auth().signInWithPopup(provider);
    } catch (error) {
      console.log(error.message);
    }
  };

  const signOut = async () => {
    try {
      await firebase.auth().signOut();
    } catch (error) {
      console.log(error.message);
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


    <section>

      {
        user ? (
            <>
              <Button onClick={signOut}>Sign out</Button>
              <Channel user={user} />
            </>
        ) : <Button onClick={signInWithGoogle}>Sign in with Google</Button>
      }
    </section>
      
    </div>
  )
}
